 
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;	
	ВыходныеПараметры = Новый Массив();
	
	// Проверка настроенных параметров.
	DataBits = Неопределено;
	Port      = Неопределено;
	Speed  = Неопределено;
	StopBit   = Неопределено;
	Prefix   = Неопределено;
	Suffix   = Неопределено;
	TimeoutCOM   = Неопределено;
	COMEncoding = Неопределено;
	
	Параметры.Свойство("DataBits", DataBits);
	Параметры.Свойство("Port",      Port);
	Параметры.Свойство("Speed",  Speed);
	Параметры.Свойство("StopBit",   StopBit);
	Параметры.Свойство("Prefix",   Prefix);
	Параметры.Свойство("Suffix",   Suffix);
	Параметры.Свойство("TimeoutCOM",   TimeoutCOM);
	Параметры.Свойство("COMEncoding", COMEncoding);
	
	Если DataBits = Неопределено
	 ИЛИ Port      = Неопределено
	 ИЛИ Speed  = Неопределено
	 ИЛИ StopBit   = Неопределено
	 ИЛИ Prefix   = Неопределено
	 ИЛИ Suffix   = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;
	КонецЕсли;
	// Конец: Проверка настроенных параметров.

	Если Результат Тогда
		ВыходныеПараметры.Добавить("BarcodeScanner");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить("NewBarcode");
		
		Попытка
			Результат = (ОбъектДрайвера.Подсоединить(ВыходныеПараметры[0]) = 0);
		Исключение
			Результат = Ложь;
		КонецПопытки;
		
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при подключении устройства.
			|Проверьте настройки порта.'"));
		КонецЕсли;

		Если Результат = Истина Тогда
			ОбъектДрайвера.DataBits  = Параметры.DataBits;
			ОбъектДрайвера.Port       = Параметры.Port;
			ОбъектДрайвера.Speed   = Параметры.Speed;
			
			// Начиная с версии 8.0.12.2 произошли изменения в интерфейсе драйвера.
			Если ВерсияСтрокаВЧисло(ОбъектДрайвера.ПолучитьНомерВерсии()) >= 8001202 И Параметры.Port=0 Тогда
				ОбъектДрайвера.ПрефиксСтрока = СПВСимволы(Параметры.Prefix, 0);
				ОбъектДрайвера.СуффиксСтрока = СПВСимволы(Параметры.Suffix, 13);
				ОбъектДрайвера.Таймаут = Параметры.Таймаут;
			Иначе
				ОбъектДрайвера.СтопСимвол = КодСимвола(СПВСимволы(Параметры.Suffix, 13));
				ОбъектДрайвера.Port       = Параметры.Port;
			КонецЕсли;
			
			// Начиная с версии 8.1.4.1 произошли изменения в интерфейсе драйвера.
			Если ВерсияСтрокаВЧисло(ОбъектДрайвера.ПолучитьНомерВерсии()) >= 8010401 И Параметры.Port > 0 Тогда
				ОбъектДрайвера.TimeoutCOM = ?(Параметры.TimeoutCOM = Неопределено, 5, Параметры.TimeoutCOM);
				ОбъектДрайвера.COMEncoding = ?(Параметры.COMEncoding = Неопределено, "UTF-8", Параметры.COMEncoding);
			КонецЕсли;
			
			ОбъектДрайвера.ИмяСобытия = ВыходныеПараметры[1][0];
			
			Попытка
				Результат = (ОбъектДрайвера.Занять(1) = 0);
			Исключение
				Результат = Ложь;
			КонецПопытки;
			
			Если Результат Тогда
				ОбъектДрайвера.УстройствоВключено = 1;
				ОбъектДрайвера.ПосылкаДанных      = 1;
				ОбъектДрайвера.ОчиститьВход();
				ОбъектДрайвера.ОчиститьВыход();
				
				Результат = (ОбъектДрайвера.УстройствоВключено = 1);
				Если НЕ Результат Тогда
					ОтключитьУстройство(ОбъектДрайвера, Параметры, ВыходныеПараметры);
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при подключении устройства.
					|Проверьте настройки порта.'"));
				КонецЕсли;
			Иначе
				ОтключитьУстройство(ОбъектДрайвера, Параметры, ВыходныеПараметры);

				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Не удалось занять устройство.
				|Проверьте настройки порта.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	ОбъектДрайвера.УстройствоВключено = 0;
	ОбъектДрайвера.Освободить();
	ОбъектДрайвера.Отсоединить();

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Обработка события от устройства.
	Если Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);

	// Завершение обработки события от устройства.
	ИначеЕсли Команда = "ЗавершитьОбработкуСобытия" Тогда
		Результат = ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Настройка параметров журналирования драйвера.
	ИначеЕсли Команда = "ПараметрыЖурналирования" Тогда
		Результат = ПараметрыЖурналирования(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает версию компоненты расположенной в макете.
//
Функция ПолучитьВерсиюВнешнейКомпоненты() 
	
	Возврат "8.1.7.5";
	
КонецФункции

// Функция осуществляет обработку внешних событий торгового оборудования.
//
// Параметры:
// 	ОбъектДрайвера - Структура - объект драйвера.
// 	Параметры - Структура - структура параметров.
// 	ПараметрыПодключения - Структура - параметры подключения оборудования.
// 	Событие - Строка - внешнее событие.
// 	Данные - Структура - структура получаемых данных
// 	ВыходныеПараметры - Массив - массив выходных параметров.
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ШК = СокрЛП(Данные);
	
	ОбъектДрайвера.ПосылкаДанных = 0;
	
	Если Параметры.Prefix <> 0 Тогда
		Если Параметры.Prefix = КодСимвола(Лев(ШК, 1)) Тогда
			ШК = Сред(ШК, 2);
		КонецЕсли;
	КонецЕсли;
	
	ВыходныеПараметры.Добавить("ScanData");
	МассивВторогоПорядка = Новый Массив;
	МассивВторогоПорядка.Добавить(ШК);
	МассивМассивов = Новый Массив;
	МассивМассивов.Добавить(Данные);
	МассивМассивов.Добавить(ШК);
	МассивМассивов.Добавить(0);
	МассивВторогоПорядка.Добавить(МассивМассивов);
	ВыходныеПараметры.Добавить(МассивВторогоПорядка);
	
	Возврат Результат;
	
КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства.
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ОбъектДрайвера.ПосылкаДанных = 1;
	
	Возврат Результат;
	
КонецФункции

// Осуществляется открытие формы проверки параметров драйвера.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;

	ОбъектДрайвера.Port      = Параметры.P_Port;
	ОбъектДрайвера.Speed  = Параметры.P_Speed;
	ОбъектДрайвера.DataBits = Параметры.P_DataBits;
		
	// Начиная с версии 8.0.12.2 произошли изменения в интерфейсе драйвера.
	Если ВерсияСтрокаВЧисло(ОбъектДрайвера.ПолучитьНомерВерсии()) >= 8001202 Тогда
		ОбъектДрайвера.Таймаут = Параметры.P_Timeout;
		// Начиная с версии 8.1.4.1 произошли изменения в интерфейсе драйвера.
		Если ВерсияСтрокаВЧисло(ОбъектДрайвера.ПолучитьНомерВерсии()) >= 8010401 Тогда
			ОбъектДрайвера.TimeoutCOM = ?(Параметры.P_TimeoutCOM = Неопределено, 5, Параметры.P_TimeoutCOM);
			ОбъектДрайвера.COMEncoding = ?(Параметры.P_ComEncoding = Неопределено, "UTF-8", Параметры.P_ComEncoding);
		КонецЕсли;
		ОбъектДрайвера.ТестУстройства();
		Параметры.P_Timeout = ОбъектДрайвера.Таймаут;
		// Начиная с версии 8.1.4.1 произошли изменения в интерфейсе драйвера.
		Если ВерсияСтрокаВЧисло(ОбъектДрайвера.ПолучитьНомерВерсии()) >= 8010401 Тогда
			Параметры.P_TimeoutCOM = ОбъектДрайвера.P_TimeoutCOM;
		КонецЕсли;
	Иначе
		ОбъектДрайвера.ТестУстройства();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Осуществляется открытие формы настройки параметров журналирования драйвера.
//
Функция ПараметрыЖурналирования(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ОбъектДрайвера.Speed  = Параметры.Speed;
	ОбъектДрайвера.DataBits = Параметры.DataBits;
	

	ОбъектДрайвера.ПараметрыЖурналирования();

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	Попытка
		Версия = ОбъектДрайвера.ПолучитьНомерВерсии();
		ВыходныеПараметры[1] = Версия;
		// Дополнительные параметры
		ВыходныеПараметры.Добавить(ПолучитьВерсиюВнешнейКомпоненты());
		ВыходныеПараметры.Добавить(ВерсияСтрокаВЧисло(Версия));
		ВыходныеПараметры.Добавить(ВерсияСтрокаВЧисло(ПолучитьВерсиюВнешнейКомпоненты()));
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция преобразует строковое представление версии (с тремя точками) к числовому (пригодному для сравнения).
//
Функция ВерсияСтрокаВЧисло(ВерсияСтрока) 
	
	Попытка
		Версия = ВерсияСтрока;
		Результат = Число(Лев(Версия, Найти(Версия, ".")-1));
		Версия = Сред(Версия, Найти(Версия, ".") + 1);
		Результат = Результат*100 + Число(Лев(Версия, Найти(Версия, ".")-1));
		Версия = Сред(Версия, Найти(Версия, ".") + 1);
		Результат = Результат*100 + Число(Лев(Версия, Найти(Версия, ".")-1));
		Версия = Сред(Версия, Найти(Версия, ".") + 1);
		Результат = Результат*100 + Число(Версия);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция преобразует Suffix/Prefix в символьную строку для передачи в драйвер
// из формата #13#10 
// из формата 13(Строка) или  10(Число)
// из формата (13)CR.
//
Функция СПВСимволы(СуффиксНомер, ПоУмолчанию) 
	
	Номер           = СуффиксНомер;
	СуффиксДрайвера = "";
	Позиция         = Найти(Номер, "#");
	
	Если Позиция = 0 Тогда
		Попытка
			ПозицияЛев = Найти(Номер, "(");
			ПозицияПрав = Найти(Номер, ")");
			Если ПозицияПрав >= ПозицияЛев Тогда
				Номер = Сред(Номер, ПозицияЛев+1, ПозицияПрав-ПозицияЛев-1);
				Номер = Число(Номер);
			Иначе
				Номер = ПоУмолчанию;	
			КонецЕсли;			
		Исключение
			Номер = ПоУмолчанию;
		КонецПопытки;
		
		Возврат Символ(Номер);
	КонецЕсли;
	
	Номер = Сред(Номер, Найти(Номер, "#") + 1);
	
	Пока Истина Цикл
		ВремНомер = Номер;
		Позиция = Найти(Номер, "#");
		Если Позиция > 0 Тогда
			ВремНомер = Лев(Номер, Позиция-1);
		КонецЕсли;	
		СуффиксДрайвера = СуффиксДрайвера + Символ(Число(ВремНомер));
		Если Позиция = 0 Тогда 
			Прервать 
		КонецЕсли;
		Номер = Сред(Номер, Найти(Номер, "#") + 1);
	КонецЦикла;

	Возврат СуффиксДрайвера;
	
КонецФункции

#КонецОбласти
