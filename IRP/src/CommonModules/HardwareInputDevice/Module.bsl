
#Область ПрограммныйИнтерфейс

Функция ПодключитьУстройство(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;

	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ОбъектДрайвера.УстановитьПараметр("EquipmentType", "СканерШтрихкода"); 

	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = 2004;
	URLЗагрузкиДрайвера       = "";

	ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
											ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);

		
	ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
		
		
	Для Каждого Параметр Из ПараметрыПодключения Цикл
		ЗначениеПараметра = Параметр.Значение;
		ИмяПараметра = Параметр.Ключ;
		ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
	КонецЦикла;
	

	Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);

	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		Message(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ElsIf Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ElsIf Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ElsIf Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства.
	ElsIf Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	// Завершение обработки события от устройства.
	ElsIf Команда = "ЗавершитьОбработкуСобытия" Тогда
		Результат = ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	Else
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
 
#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВводаДанных

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Если Событие = "Barcode" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanData");
		МассивМассивов = Новый Массив();
		МассивМассивов.Добавить(Штрихкод);
		МассивВторогоПорядка = Новый Массив();
		МассивВторогоПорядка.Добавить(Данные);
		МассивВторогоПорядка.Добавить(Штрихкод);
		МассивВторогоПорядка.Добавить(0);
		МассивМассивов.Добавить(МассивВторогоПорядка);
		ВыходныеПараметры.Добавить(МассивМассивов);
		Результат = Истина;
		
	ElsIf Событие = "BarcodeBase64" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanDataBase64");
		МассивМассивов = Новый Массив();
		МассивМассивов.Добавить(Штрихкод);
		МассивВторогоПорядка = Новый Массив();
		МассивВторогоПорядка.Добавить(Данные);
		МассивВторогоПорядка.Добавить(Штрихкод);
		МассивВторогоПорядка.Добавить(0);
		МассивМассивов.Добавить(МассивВторогоПорядка);
		ВыходныеПараметры.Добавить(МассивМассивов);
		Результат = Истина;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства.
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Else
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Else
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	Попытка
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
		
		Попытка
			// Получаем описание драйвера.
			ОписаниеДрайвера = "";
			ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
			ОписаниеДрайвераПараметры = HardwareServer.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
			ВерсияДрайвера = ОписаниеДрайвераПараметры.ВерсияДрайвера;
		Исключение
			Результат = Истина;
		КонецПопытки;
	КонецПопытки;
	
	ВыходныеПараметры[1] = ВерсияДрайвера;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = 3003;
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
	КонецЕсли;
		
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
			// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, ИнтеграционныйКомпонент, 
			ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
			ОписаниеДрайвера = "";
			ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
			ОписаниеДрайвераПараметры = HardwareServer.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
			ВерсияДрайвера            = ОписаниеДрайвераПараметры.ВерсияДрайвера;
			НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
			ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
			ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
			ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
			ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
			URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
			// Получаем ревизию интерфейса драйвера.
			РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
	КонецПопытки;
	
	Если Результат Тогда
		ВыходныеПараметры[1] = ВерсияДрайвера;
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционныйКомпонент;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		// Получаем дополнительные действия.
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти 