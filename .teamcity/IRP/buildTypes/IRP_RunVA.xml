<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="7f2b4266-2190-45dc-8a50-eaa7d2e2fa01" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2020.1/project-config.xsd">
  <name>3. RunVA</name>
  <description />
  <settings>
    <options>
      <option name="allowExternalStatus" value="true" />
      <option name="artifactRules" value="+:allure-report.zip&#xA;+:Cover.zip&#xA;+:%teamcity.project.id%.zip" />
      <option name="cleanBuild" value="true" />
    </options>
    <disabled-settings>
      <setting-ref ref="RUNNER_6" />
    </disabled-settings>
    <parameters>
      <param name="env.BranchToStartVA" value="develop" />
      <param name="env.CloseVA" value="true" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.ConfigurationFileName" value="%env.Database1CName%" />
      <param name="env.Database1CName" value="" />
      <param name="env.DebugPort" value="" />
      <param name="env.DebugVA" value="false" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.LogFile1C" value="%system.teamcity.build.workingDir%\Log1C.log" />
      <param name="env.OScript" value="C:/OneScript" />
      <param name="env.PID_ID" value="0" />
      <param name="env.SonarParamCover" value="" />
      <param name="env.StopOnError" value="false" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.StreamCount" value="3" />
      <param name="env.TR_Bank_Key" value="credentialsJSON:8036a633-0c14-4d64-991c-b98b36c82dd1" spec="password display='normal' readOnly='true'" />
      <param name="env.TagsFullList" value="&quot;Discount&quot;, &quot;Forms&quot;, &quot;FillingDocuments&quot;, &quot;CreationBasedMulti&quot;, &quot;Other&quot;, &quot;CashManagement&quot;, &quot;Inventory&quot;, &quot;BankCashDocuments&quot;, &quot;Filters&quot;, &quot;Purchase&quot;, &quot;AdditionalAttributes&quot;, &quot;UserSettings&quot;, &quot;Sales&quot;, &quot;LinkedTransaction&quot;, &quot;AgingAndCreditLimit&quot;, &quot;RetailDocuments&quot;, &quot;PartnerCatalogs&quot;, &quot;InfoMessages&quot;, &quot;ExtensionReportForm&quot;, &quot;ContactInformation&quot;, &quot;DocumentVerification&quot;, &quot;StandartAgreement&quot;, &quot;AccessRights&quot;, &quot;ItemCatalogs&quot;, &quot;PhysicalInventory&quot;, &quot;Price&quot;, &quot;SerialLotNumber&quot;, &quot;InputBySearchInLine&quot;, &quot;LoadInfo&quot;, &quot;Services&quot;, &quot;SettingsCatalogs&quot;, &quot;BasicFormsCheck&quot;, &quot;OpeningEntries&quot;, &quot;ProcurementDataProc&quot;, &quot;InventoryTransfer&quot;, &quot;UserCatalogs&quot;, &quot;CompanyCatalogs&quot;, &quot;TaxCalculation&quot;, &quot;PrintForm&quot;, &quot;CurrencyRate&quot;, &quot;Barcodes&quot;" />
      <param name="env.VA.FeaturePath" value="%teamcity.build.workingDir%/features/" />
      <param name="env.VA_PID" value="" />
      <param name="env.dbgs_PID" value="" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_69" name="Set env" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[echo "BranchToStartVA %env.BranchToStartVA%"
echo "teamcity.pullRequest.target.branch %teamcity.pullRequest.target.branch%"
echo "teamcity.build.branch %teamcity.build.branch%"
$VA_Tags = ""

if('%teamcity.pullRequest.target.branch%' -eq '%env.BranchToStartVA%')
{
	$SonarParamCover = "-Dsonar.coverageReportPaths=%system.teamcity.build.workingDir%/Cover.xml"
 	$InfobaseName = "%env.Database1CName%_%teamcity.pullRequest.target.branch%_pull%teamcity.pullRequest.number%"
    
}
elseif('%teamcity.build.branch%' -eq '%env.BranchToStartVA%')
{
	$SonarParamCover = "-Dsonar.coverageReportPaths=%system.teamcity.build.workingDir%/Cover.xml"
	$InfobaseName = "%env.Database1CName%_%teamcity.build.branch%"
    
}
else
{
	$SonarParamCover = ""
	$InfobaseName = "%env.Database1CName%_%teamcity.build.branch%"
}

$InfobaseName = $InfobaseName -replace "\\", "_" 
$InfobaseName = $InfobaseName -replace "\/", "_" 
$InfobaseName = $InfobaseName -replace "\-", "_"

echo "##teamcity[setParameter name='env.Database1CName' value='$InfobaseName']"
echo "##teamcity[setParameter name='env.SonarParamCover' value='$SonarParamCover']"]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_31" name="Copy add data  proc from tools" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code" value="Copy-Item -Path &quot;%teamcity.tool.ExtDataProc%/*&quot; -Destination &quot;%teamcity.build.workingDir%/DataProcessor&quot;" />
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_54" name="Create new Template DB" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[start /wait "1cv8.exe" %env.PathTo1CPlatform%  CREATEINFOBASE File=%system.teamcity.build.workingDir%\TempDB;Locale=en; /UseTemplate %teamcity.tool.TemplateIRP%\TemplateIRP.dt /Out %env.LogFile1C%

echo ##teamcity[compilationStarted compiler='Log from 1C: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *"Error"* ]]; then echo -e ""\e[31m $line""; else  echo -e ""\e[34m $line""; fi;  done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C: %env.LogFile1C%']

start /wait "1cv8.exe" %env.PathTo1CPlatform%  DESIGNER %env.ConnectionTo1C% /Out %env.LogFile1C%  /LoadCfg %system.teamcity.build.workingDir%\%env.ConfigurationFileName%.cf /UpdateDBCfg
echo ##teamcity[compilationStarted compiler='Log from 1C Update CF: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *"Error"* ]]; then echo -e ""\e[31m $line""; else  echo -e ""\e[34m $line""; fi;  done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C Update CF: %env.LogFile1C%']

rd /q /s "%%userprofile%%\AppData\Local\1C\1Cv8\"
rd /q /s "%%userprofile%%\AppData\Roaming\1C\1Cv8\"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_55" name="Start debug" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo 
$ProcessInfo.FileName = "%env.PathTo1CBin%\dbgs.exe" 
$ProcessInfo.UseShellExecute = $false 
$port = Get-Random -Minimum 1400 -Maximum 1500
echo "##teamcity[setParameter name='env.DebugPort' value='$port']"
$ProcessInfo.Arguments = " --addr=localhost --port=$port" 
$Process = New-Object System.Diagnostics.Process 
$Process.StartInfo = $ProcessInfo 
$Process.Start() | Out-Null  
$dbgs_PID = $Process.Id 
echo "##teamcity[setParameter name='env.dbgs_PID' value='$dbgs_PID']"]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_14" name="Start Coverage" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[coverage-cli start --infobase DefAlias  --debugger http://localhost:%env.DebugPort% --output %system.teamcity.build.workingDir%/Cover.csv > "%system.teamcity.build.tempDir%\Cover.Log"
rem coverage-cli start --infobase %env.Database1CName%  --debugger http://localhost:%env.DebugPort% --output %system.teamcity.build.workingDir%/Cover.csv > "%system.teamcity.build.tempDir%\Cover.Log"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_68" name="VA with test" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$TagArray = @(%env.TagsFullList%)
Write-Output "Start full test"

New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%/allure/base"
$startPort = 48010
New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\logpath"
New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\AllSteps"
New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\AllSteps\Template"
Copy-Item -Path "%system.teamcity.build.workingDir%\TempDB\1Cv8.1CD" -Destination "%system.teamcity.build.workingDir%\AllSteps\Template\1Cv8.1CD"

$StreamCountMax = %env.StreamCount%

$VanessaRun = {
    Param($elementTag, $startPort)

    $portmax = $startPort + 9
    $ScriptLogFilePath = "%system.teamcity.build.workingDir%\$elementTag.log"
    #Write-Output "##teamcity[compilationStarted compiler='VA settings $elementTag']"
    Write-Output "$startPort - $portmax"
    $allurePath = "%system.teamcity.build.workingDir%/allure" | ForEach-Object { $_ -replace '\\', '/' }
    $TempDb = "'/F%system.teamcity.build.workingDir%\AllSteps\$elementTag'" | ForEach-Object { $_ -replace '\\', '/' } 
    New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\AllSteps\$elementTag"
    Copy-Item -Path "%system.teamcity.build.workingDir%\TempDB\1Cv8.1CD" -Destination "%system.teamcity.build.workingDir%\AllSteps\$elementTag\1Cv8.1CD"
    
    #$TempDb = "'/Slocalhost/%env.Database1CName%'" | ForEach-Object { $_ -replace '\\', '/' }
     
    $connection = "' /N %env.LoginTo1C% /P %env.PassTo1C% /Len /UseHwLicenses+ /TComp -SDC  /DisableStartupMessages /DisplayPerformance /DisplayAllFunctions /EnableCheckModal /EnableCheckExtensionsAndAddInsSyncCalls /DEBUG -http -attach /DEBUGGERURL http://localhost:%env.DebugPort%'"
    $text = "{
    'AllureReport': {
        'DataAllureMarks': [],
        'attachactiveformdatatotheallurereport': true,
        'attachallformsdatatotheallurereport': false,
        'attachdataoftheoperatingsystemprocessestotheallurereport': true,
        'attacheventlogtotheallurereport': true,
        'attachnetworkconnectiondatatotheallurereport': true,
        'attachvariablestotheallurereport': true,
        'reportlevel1': '#report.epic=;catalog1',
        'reportlevel2': '#report.feature=;catalog2',
        'reportlevel3': '#report.story=;scenarioname',
        'testsuites': ''
    },
    'DebugLog': false,
    'DownloadFeaturesOpen': 1,
    'Lang': 'en',
    'ModelingCreateReport': false,
    'RunningScripts': {
        'SpacingStepSpecifiedUser': 0.1,
        'dosleepusingping': false,
        'makestepsasync': false,
        'numberofattemptstoperformanaction': 3,
        'pauseonwindowopening': 0,
        'pendingequalfailed': true,
        'safeexecutionofsteps': false,
        'showrownumberonerror': false,
        'stoponerror': %env.StopOnError%,
        'timeoutforasynchronoussteps': 0,
        'timetofindwindow': 5,
        'updatestatistics': false,
        'updatetreewhenscenariostarts': false
    },
    'TestClient': {
        'datatestclients': [{
                'AddItionalParameters': $connection,
                'ClientType': 'Thin',
                'ComputerName': 'localhost',
                'Name': 'This client',
                'PathToInfobase': $TempDb,
                'PortTestClient': $startPort
            }
        ],
        'runtestclientwithmaximizedwindow': false,
        'testclienttimeout': 25
    },
    'Version': '1.2.034',
    'VersionVA': 'ver 1.2.034',
    'addmetainformationclicking': false,
    'addtofeaturefilter': true,
    'allurecreatereport': true,
    'closetestclient': %env.CloseVA%,
    'collectdataoftheoperatingsystemprocesses': false,
    'collectnetworkconnectiondata': false,
    'cucumbercreatereport': false,
    'filtertags': [],
    'getactiveformdataonerror': true,
    'getallformsdataonerror': true,
    'htmlcreate': false,
    'ignoretags': ['IgnoreOnCIMainBuild', 'Negative'],
    'junitcreatereport': false,
    'librarycatalogs': [],
    'logerrorstotext': true,
    'logstepstotext': false,
    'logtogr': true,
    'logtotext': true,
    'markdowncreate': false,
    'onerrorscreenshot': true,
    'onerrorscreenshoteverywindow': false,
    'platformversiongenerateepf': 'C:\\Program Files\\1cv8\\8.3.15.1869\\bin\\',
    'screencaptureaddinmethod': 2,
    'searchformelementsbyname': false,
    'simplereport': false,
    'thetreetagisenabledbydefault': true,
    'useaddin': true,
    'useaddinforscreencapture': true,
    'usersettingsprovider': 'FILE',
    'usesikulixserver': false,
    'vanessarun': true,
    'vanessashutdown': %env.CloseVA%,
    'videcreate': false,
    'createlogs': true
}"
    #Write-Output "$text"
    $a = $text | ConvertFrom-Json
    #Write-Output "featurepath - %env.VA.FeaturePath%Internal_New"
    $a | Add-Member -Type NoteProperty -Name 'featurepath' -Value '%env.VA.FeaturePath%Internal_New'
    #Write-Output "projectpath - %system.teamcity.build.workingDir%"
    $a | Add-Member -Type NoteProperty -Name 'projectpath' -Value '%system.teamcity.build.workingDir%'
    #Write-Output "outputscreenshot - %system.teamcity.build.tempDir%"
    $a | Add-Member -Type NoteProperty -Name 'outputscreenshot' -Value '%system.teamcity.build.workingDir%\screenShots'
    #Write-Output "texterrorslogname - %system.teamcity.build.tempDir%\errors$elementTag"
    $a | Add-Member -Type NoteProperty -Name 'texterrorslogname' -Value "%system.teamcity.build.tempDir%\errors\$elementTag"
    #Write-Output "textlogname - $ScriptLogFilePath"
    $a | Add-Member -Type NoteProperty -Name 'textlogname' -Value $ScriptLogFilePath
    #Write-Output "testclientports - $startPort - $portmax"
    $a | Add-Member -Type NoteProperty -Name 'testclientports' -Value "$startPort - $portmax"
    #Write-Output "directorytobuildhierarchy - %env.VA.FeaturePath%"
    $a.AllureReport | Add-Member -Type NoteProperty -Name 'directorytobuildhierarchy' -Value '%env.VA.FeaturePath%'
    #Write-Output "allurepath - $allurePath/$elementTag"
    $a.AllureReport | Add-Member -Type NoteProperty -Name 'allurepath' -Value "$allurePath/$elementTag"
    #$a.AllureReport | Add-Member -Type NoteProperty -Name 'allurepathbase' -Value "$allurePath/base"
    #Write-Output "logpath - %system.teamcity.build.tempDir%\logpath$elementTag"
    $a | Add-Member -Type NoteProperty -Name 'logpath' -Value "%system.teamcity.build.workingDir%\logpath\$elementTag.log"    
   
    $a.librarycatalogs += '%system.teamcity.build.workingDir%\DataProcessor'
    $a.librarycatalogs += '%env.VA.FeaturePath%External_New'
    $a.librarycatalogs += '%env.OScript%/lib/vanessa-automation/features/Libraries'
    $a.filtertags += $elementTag
  
    $b = $a | ConvertTo-Json -depth 32
    $b | set-content %system.teamcity.build.workingDir%/va$elementTag.json
    #Write-Output "$b"
    #Write-Output "##teamcity[compilationFinished compiler='VA settings']"
  
    ### Run VA ########################################################################
    $NewD = New-Desktop
    Set-DesktopName -Desktop $NewD -Name $elementTag
    Switch-Desktop -Desktop $NewD
    Start-Sleep 2
    $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo 
    $ProcessInfo.FileName = %env.PathTo1CPlatform% 
    $ProcessInfo.UseShellExecute = $false 
    $ProcessInfo.Arguments = "/N %env.LoginTo1C% /P %env.PassTo1C%  ""/F%system.teamcity.build.workingDir%\AllSteps\$elementTag"" /Execute ""%env.OScript%/lib/vanessa-automation/vanessa-automation.epf"" /TestManager /C""StartFeaturePlayer; VBParams=%system.teamcity.build.workingDir%\va$elementTag.json""" 
    $Process = New-Object System.Diagnostics.Process 
    $Process.StartInfo = $ProcessInfo 
    $Process.Start() | Out-Null  
    $processID = $Process.Id 
    Write-Output "##teamcity[setParameter name='env.VA_PID' value='$processID']"

    ### Start tail #####################################################################
    Write-Host "##teamcity[flowStarted flowId='$elementTag']"
    Write-Host "##teamcity[testSuiteStarted name='$elementTag' flowId='$elementTag']"


    Write-Output "Wait for log file: $elementTag"
    Write-Host "##teamcity[testStarted  name='Wait for log file: $elementTag' flowId='$elementTag']"
    $Skip = $false
    $ScriptLogFilePath = "%system.teamcity.build.workingDir%\$elementTag.log"
        do {
        Start-Sleep 1        
        if (!(Get-Process -id $processID -ErrorAction SilentlyContinue)){
        Write-Host "##teamcity[testFailed name='Wait for log file: $elementTag' message='Log file not found: $ScriptLogFilePath' flowId='$elementTag']"
        $Skip = $true
        break
        }
        
    } while (!(Test-Path $ScriptLogFilePath))
    Write-Host "##teamcity[testFinished name='Wait for log file: $elementTag' duration='$TotalMilliseconds' flowId='$elementTag']"
    
    if (!$Skip) {
      Write-Output "Start tail: $elementTag"

      $CurrentFeatureFile = ""
      $CurrentTest = ""
      $LastIndex = 0
      do{
          $TextInLog = Get-Content $ScriptLogFilePath -Encoding UTF8 -Force -ErrorAction SilentlyContinue

          For ($index = $LastIndex; $index -le $TextInLog.count - 1; $index++) {
              $line = $TextInLog[$index]
              if($line -match "Feature:"){
                  $FeatureFile = $line -split "\\"
                  if($CurrentFeatureFile -eq ""){
                      $CurrentFeatureFile =  $FeatureFile[$FeatureFile.count - 1]
                      Write-Host "##teamcity[testSuiteStarted name='$CurrentFeatureFile' flowId='$elementTag']"
                  }else{

                      if($CurrentTest -ne ""){
                          $EndDate = Get-Date
                          $Diff =  New-TimeSpan -Start $CurrentDate -End $EndDate
                          $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
                          Write-Host "##teamcity[testFinished name='$CurrentTest' duration='$TotalMilliseconds' flowId='$elementTag']"
                          $CurrentTest = ""
                      }

                      Write-Host "##teamcity[testSuiteFinished name='$CurrentFeatureFile' flowId='$elementTag']"
                      $CurrentFeatureFile =  $FeatureFile[$FeatureFile.count - 1]
                      Write-Host "##teamcity[testSuiteStarted name='$CurrentFeatureFile' flowId='$elementTag']"
                  }

              }elseif($line -match "Script:"){
                  $Test = $line -split ":"
                  if($CurrentTest -eq ""){
                      $CurrentTest =  $Test[$Test.count - 1]
                      Write-Host "##teamcity[testStarted name='$CurrentTest' flowId='$elementTag']"
                      $CurrentDate = Get-Date
                  }else{
                      $EndDate = Get-Date
                      $Diff =  New-TimeSpan -Start $CurrentDate -End $EndDate

                      $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
                      Write-Host "##teamcity[testFinished name='$CurrentTest' duration='$TotalMilliseconds' flowId='$elementTag']"
                      $CurrentTest =  $Test[$Test.count - 1]
                      $CurrentTest = $CurrentTest.replace("|", "||").replace("'", "|'").replace("[", "|[").replace("]", "|]").replace("`n", "|n").replace("`r", "|r")
                      Write-Host "##teamcity[testStarted  name='$CurrentTest' flowId='$elementTag']"
                      $CurrentDate = Get-Date
                  }
              }elseif($line -match "Failed:"){
                  $ErrorDescription = $line -split ":"
                  if($CurrentTest -eq ""){

                  }else{
                      $ErrorDescription = $ErrorDescription.replace("|", "||").replace("'", "|'").replace("[", "|[").replace("]", "|]").replace("`n", "|n").replace("`r", "|r")
                      Write-Host "##teamcity[testFailed name='$CurrentTest' message='$ErrorDescription' flowId='$elementTag']"
                  }    
              }else{
                  if($CurrentTest -ne ""){
                      Write-Host "##teamcity[testStdOut name='$CurrentTest' out='$line' flowId='$elementTag']"
                  }            
              }
              $LastIndex = $TextInLog.count
          }
          Start-Sleep 1
      } while(Get-Process -id $processID -ErrorAction SilentlyContinue)

	}
    $EndDate = Get-Date
    $Diff =  New-TimeSpan -Start $CurrentDate -End $EndDate
                        
    $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
    Write-Host "##teamcity[testFinished name='$CurrentTest' duration='$TotalMilliseconds' flowId='$elementTag']"
    Write-Host "##teamcity[testSuiteFinished name='$CurrentFeatureFile' flowId='$elementTag']"


    Write-Host "##teamcity[testSuiteFinished name='$elementTag' flowId='$elementTag']"
    Write-Host "##teamcity[flowFinished flowId='$elementTag']"
    Remove-Desktop -Desktop $NewD -Verbose
}
$JobArray = @{}
$JobTimes = @{}
foreach ($elementTag in $TagArray) {
    $startPort += 10
    $JobTailProc = Start-Job -scriptBlock $VanessaRun -ArgumentList $elementTag,$startPort
    $CurrentDate = Get-Date
    $JobArray.Add($elementTag,$JobTailProc)
    $JobTimes = $JobTimes + @{$elementTag=@($CurrentDate, "")}
    $NumberJob = $JobTimes.count
    Write-Host "Start $elementTag at $CurrentDate #$NumberJob/$TotalTags"

    do {
        Start-Sleep 1
            $listsToDelete = @()

            $JobArray.GetEnumerator() | ForEach-Object {
                $key = $($_.key)
                $JobArray[$key] | Receive-Job
                if ($JobArray[$key].State -eq "Running") {

                }elseif ($JobArray[$key].State -eq "Completed") {
                    $listsToDelete += $key
                }else{
                    
                }
            }
            foreach($listToDelete in $listsToDelete) {
                $JobArray.Remove($listToDelete)
            }
    } while ($JobArray.count -ge $StreamCountMax)
}

do {
    Start-Sleep 1
        $listsToDelete = @()

        $JobArray.GetEnumerator() | ForEach-Object {
            $key = $($_.key)
            $JobArray[$key] | Receive-Job
            if ($JobArray[$key].State -eq "Running") {

            }elseif ($JobArray[$key].State -eq "Completed") {
                $listsToDelete += $key
            }else{
                
            }
        }
        foreach($listToDelete in $listsToDelete) {
            $JobArray.Remove($listToDelete)
        }
} while ($JobArray.count)
$JobTimes]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_6" name="Start VA async" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_errorToError" value="true" />
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$TagArray = @(%env.TagsFullList%)
Write-Output "Start full test"


New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%/allure/base"
$startPort = 48010
New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\logpath"
New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\AllSteps"
New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\AllSteps\Template"
Copy-Item -Path "%system.teamcity.build.workingDir%\TempDB\1Cv8.1CD" -Destination "%system.teamcity.build.workingDir%\AllSteps\Template\1Cv8.1CD"

$StreamCountMax = %env.StreamCount%

$VanessaRun = {
    Param($elementTag, $startPort)

    $portmax = $startPort + 9
    $ScriptLogFilePath = "%system.teamcity.build.workingDir%\$elementTag.log"
    #Write-Output "##teamcity[compilationStarted compiler='VA settings $elementTag']"
    Write-Output "$startPort - $portmax"
    $allurePath = "%system.teamcity.build.workingDir%/allure" | ForEach-Object { $_ -replace '\\', '/' }
    $TempDb = "'/F%system.teamcity.build.workingDir%\AllSteps\$elementTag'" | ForEach-Object { $_ -replace '\\', '/' } 
    New-Item -ItemType "directory" -Path "%system.teamcity.build.workingDir%\AllSteps\$elementTag"
    Copy-Item -Path "%system.teamcity.build.workingDir%\TempDB\1Cv8.1CD" -Destination "%system.teamcity.build.workingDir%\AllSteps\$elementTag\1Cv8.1CD"
    
    #$TempDb = "'/Slocalhost/%env.Database1CName%'" | ForEach-Object { $_ -replace '\\', '/' }
     
    $connection = "' /N %env.LoginTo1C% /P %env.PassTo1C% /Len /UseHwLicenses+ /TComp -SDC  /DisableStartupMessages /DisplayPerformance /DisplayAllFunctions /EnableCheckModal /EnableCheckExtensionsAndAddInsSyncCalls /DEBUG -http -attach /DEBUGGERURL http://localhost:%env.DebugPort%'"
    $text = "{
    'AllureReport': {
        'DataAllureMarks': [],
        'attachactiveformdatatotheallurereport': true,
        'attachallformsdatatotheallurereport': false,
        'attachdataoftheoperatingsystemprocessestotheallurereport': true,
        'attacheventlogtotheallurereport': true,
        'attachnetworkconnectiondatatotheallurereport': true,
        'attachvariablestotheallurereport': true,
        'reportlevel1': '#report.epic=;catalog1',
        'reportlevel2': '#report.feature=;catalog2',
        'reportlevel3': '#report.story=;scenarioname',
        'testsuites': ''
    },
    'DebugLog': false,
    'DownloadFeaturesOpen': 1,
    'Lang': 'en',
    'ModelingCreateReport': false,
    'RunningScripts': {
        'SpacingStepSpecifiedUser': 0.1,
        'dosleepusingping': false,
        'makestepsasync': false,
        'numberofattemptstoperformanaction': 3,
        'pauseonwindowopening': 0,
        'pendingequalfailed': true,
        'safeexecutionofsteps': false,
        'showrownumberonerror': false,
        'stoponerror': %env.StopOnError%,
        'timeoutforasynchronoussteps': 0,
        'timetofindwindow': 5,
        'updatestatistics': false,
        'updatetreewhenscenariostarts': false
    },
    'TestClient': {
        'datatestclients': [{
                'AddItionalParameters': $connection,
                'ClientType': 'Thin',
                'ComputerName': 'localhost',
                'Name': 'This client',
                'PathToInfobase': $TempDb,
                'PortTestClient': $startPort
            }
        ],
        'runtestclientwithmaximizedwindow': false,
        'testclienttimeout': 25
    },
    'Version': '1.2.034',
    'VersionVA': 'ver 1.2.034',
    'addmetainformationclicking': false,
    'addtofeaturefilter': true,
    'allurecreatereport': true,
    'closetestclient': %env.CloseVA%,
    'collectdataoftheoperatingsystemprocesses': false,
    'collectnetworkconnectiondata': false,
    'cucumbercreatereport': false,
    'filtertags': [],
    'getactiveformdataonerror': true,
    'getallformsdataonerror': true,
    'htmlcreate': false,
    'ignoretags': ['IgnoreOnCIMainBuild', 'Negative'],
    'junitcreatereport': false,
    'librarycatalogs': [],
    'logerrorstotext': true,
    'logstepstotext': false,
    'logtogr': true,
    'logtotext': true,
    'markdowncreate': false,
    'onerrorscreenshot': true,
    'onerrorscreenshoteverywindow': false,
    'platformversiongenerateepf': 'C:\\Program Files\\1cv8\\8.3.15.1869\\bin\\',
    'screencaptureaddinmethod': 2,
    'searchformelementsbyname': false,
    'simplereport': false,
    'thetreetagisenabledbydefault': true,
    'useaddin': true,
    'useaddinforscreencapture': true,
    'usersettingsprovider': 'FILE',
    'usesikulixserver': false,
    'vanessarun': true,
    'vanessashutdown': %env.CloseVA%,
    'videcreate': false,
    'createlogs': true
}"
    #Write-Output "$text"
    $a = $text | ConvertFrom-Json
    #Write-Output "featurepath - %env.VA.FeaturePath%Internal_New"
    $a | Add-Member -Type NoteProperty -Name 'featurepath' -Value '%env.VA.FeaturePath%Internal_New'
    #Write-Output "projectpath - %system.teamcity.build.workingDir%"
    $a | Add-Member -Type NoteProperty -Name 'projectpath' -Value '%system.teamcity.build.workingDir%'
    #Write-Output "outputscreenshot - %system.teamcity.build.tempDir%"
    $a | Add-Member -Type NoteProperty -Name 'outputscreenshot' -Value '%system.teamcity.build.workingDir%\screenShots'
    #Write-Output "texterrorslogname - %system.teamcity.build.tempDir%\errors$elementTag"
    $a | Add-Member -Type NoteProperty -Name 'texterrorslogname' -Value "%system.teamcity.build.tempDir%\errors\$elementTag"
    #Write-Output "textlogname - $ScriptLogFilePath"
    $a | Add-Member -Type NoteProperty -Name 'textlogname' -Value $ScriptLogFilePath
    #Write-Output "testclientports - $startPort - $portmax"
    $a | Add-Member -Type NoteProperty -Name 'testclientports' -Value "$startPort - $portmax"
    #Write-Output "directorytobuildhierarchy - %env.VA.FeaturePath%"
    $a.AllureReport | Add-Member -Type NoteProperty -Name 'directorytobuildhierarchy' -Value '%env.VA.FeaturePath%'
    #Write-Output "allurepath - $allurePath/$elementTag"
    $a.AllureReport | Add-Member -Type NoteProperty -Name 'allurepath' -Value "$allurePath/$elementTag"
    #$a.AllureReport | Add-Member -Type NoteProperty -Name 'allurepathbase' -Value "$allurePath/base"
    #Write-Output "logpath - %system.teamcity.build.tempDir%\logpath$elementTag"
    $a | Add-Member -Type NoteProperty -Name 'logpath' -Value "%system.teamcity.build.workingDir%\logpath\$elementTag.log"    
   
    $a.librarycatalogs += '%system.teamcity.build.workingDir%\DataProcessor'
    $a.librarycatalogs += '%env.VA.FeaturePath%External_New'
    $a.librarycatalogs += '%env.OScript%/lib/vanessa-automation/features/Libraries'
    $a.filtertags += $elementTag
  
    $b = $a | ConvertTo-Json -depth 32
    $b | set-content %system.teamcity.build.workingDir%/va$elementTag.json
    #Write-Output "$b"
    #Write-Output "##teamcity[compilationFinished compiler='VA settings']"
  
    ### Run VA ########################################################################
    $NewD = New-Desktop
    Set-DesktopName -Desktop $NewD -Name $elementTag
    Switch-Desktop -Desktop $NewD
    Start-Sleep 2
    $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo 
    $ProcessInfo.FileName = %env.PathTo1CPlatform% 
    $ProcessInfo.UseShellExecute = $false 
    $ProcessInfo.Arguments = "/N %env.LoginTo1C% /P %env.PassTo1C%  ""/F%system.teamcity.build.workingDir%\AllSteps\$elementTag"" /Execute ""%env.OScript%/lib/vanessa-automation/vanessa-automation.epf"" /TestManager /C""StartFeaturePlayer; VBParams=%system.teamcity.build.workingDir%\va$elementTag.json""" 
    $Process = New-Object System.Diagnostics.Process 
    $Process.StartInfo = $ProcessInfo 
    $Process.Start() | Out-Null  
    $processID = $Process.Id 
    Write-Output "##teamcity[setParameter name='env.VA_PID' value='$processID']"

    ### Start tail #####################################################################
    Start-Sleep 30
    $ScriptLogFilePath = "%system.teamcity.build.workingDir%\$elementTag.log"
    #Write-Output "##teamcity[compilationStarted compiler='$ScriptLogFilePath']"

    #Write-Host "VA PID $processID"
    while (!(Test-Path $ScriptLogFilePath)) { 
        If (Get-Process -id $processID -ErrorAction SilentlyContinue ) {
            Start-Sleep 5
            #Write-Host "Wait for file $ScriptLogFilePath"
        }
        else {
            Write-Host "File $ScriptLogFilePath not found"
            break
        } 
    }
 
    If (Test-Path $ScriptLogFilePath) {
        $loopBlock = {
            Param($ScriptLogFilePath) 
            Get-Content $ScriptLogFilePath -Wait -Tail 0 -Encoding UTF8
        }
        $TailLoopJob = start-job -scriptBlock $loopBlock -ArgumentList $ScriptLogFilePath
        try {
            do {
                $TailLoopJob | Receive-Job
                If (Get-Process -id $processID -ErrorAction SilentlyContinue ) {
                    Start-Sleep 1         
                    $waitMore = $true
                }
                else {
                    $waitMore = $false
                }
            } while ($waitMore)
        }
        finally {
            Stop-Job $TailLoopJob
            Remove-Job $TailLoopJob
        }
    }
    else {
        Write-Host "File $ScriptLogFilePath not found. Skip read tail log"
    }
    Remove-Desktop -Desktop $NewD -Verbose
}
$JobArray = @{}
$JobTimes = @{}
foreach ($elementTag in $TagArray) {
    $startPort += 10
    $JobTailProc = start-job -scriptBlock $VanessaRun -ArgumentList $elementTag,$startPort
    Start-Sleep 30
    $CurrentDate = Get-Date
    $JobArray.Add($elementTag,$JobTailProc)
    $JobTimes = $JobTimes + @{$elementTag=@($CurrentDate, "")}
    $NumberJob = $JobTimes.count
    Write-Host "Start $elementTag at $CurrentDate #$NumberJob/$TotalTags"
   

    do {
        Start-Sleep 10
        $jobCount = $JobArray.count
        #Write-Output "Current job count: $jobCount Max count: $StreamCountMax"


        $listsToDelete = @()

        $JobArray.GetEnumerator() | ForEach-Object {
            $key = $($_.key)
            $JobArray[$key] | Receive-Job
            if (!($JobArray[$key].State -eq "Running")) {
                
                $CurrentDate = Get-Date
                $JobTimes[$key][1] = $CurrentDate 
                
                $listsToDelete += $key
                #Write-Host "End $key at $CurrentDate"
                Write-Host  "##teamcity[testStarted name='$key' captureStandardOutput='true']"
                
                Write-Host $JobTimes[$key]
                
                $ScriptLogFilePath = "%system.teamcity.build.workingDir%\$key.log"
                $LogStatusFilePath = "%system.teamcity.build.workingDir%\logpath\$key.log" 
                if (Test-Path $ScriptLogFilePath) {                
                  Get-Content -Path $ScriptLogFilePath -Encoding utf8            
                } else {
                  Write-Host "##teamcity[testFailed name='$key' message='Log file not found $ScriptLogFilePath']"
                }
                if (Test-Path $LogStatusFilePath) {                
                  $Status = Get-Content -Path $LogStatusFilePath -Encoding utf8
                  if ($Status -eq "0"){
                  } else {
                  	 Write-Host "##teamcity[testFailed name='$key' message='Test has some errors. Status: $Status']"
                  }
                } else {
                  Write-Host "##teamcity[testFailed name='$key' message='Log status file not found $LogStatusFilePath']"
                }
                $Diff =  New-TimeSpan -Start $JobTimes[$key][0] -End $JobTimes[$key][1]
                $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
                Write-Host  "##teamcity[testFinished name='$key' duration='$TotalMilliseconds']"
            }
        }
        foreach($listToDelete in $listsToDelete) {
            $JobArray.Remove($listToDelete)
        }

    } while ($JobArray.count -ge $StreamCountMax)
}



do {
    Start-Sleep 10

   $jobCount = $JobArray.count
        $listsToDelete = @()

        $JobArray.GetEnumerator() | ForEach-Object {
            $key = $($_.key)
            $JobArray[$key] | Receive-Job
            if (!($JobArray[$key].State -eq "Running")) {
                
                $CurrentDate = Get-Date
                $JobTimes[$key][1] = $CurrentDate 
                
                $listsToDelete += $key
                #Write-Host "End $key at $CurrentDate"
                Write-Host  "##teamcity[testStarted name='$key' captureStandardOutput='true']"
                
                Write-Host $JobTimes[$key]
                
                $ScriptLogFilePath = "%system.teamcity.build.workingDir%\$key.log"
                $LogStatusFilePath = "%system.teamcity.build.workingDir%\logpath\$key.log" 
                if (Test-Path $ScriptLogFilePath) {                
                  Get-Content -Path $ScriptLogFilePath -Encoding utf8            
                } else {
                  Write-Host "##teamcity[testFailed name='$key' message='Log file not found $ScriptLogFilePath']"
                }
                if (Test-Path $LogStatusFilePath) {                
                  $Status = Get-Content -Path $LogStatusFilePath -Encoding utf8
                  if ($Status -eq "0"){
                  } else {
                  	 Write-Host "##teamcity[testFailed name='$key' message='Test has some errors. Status: $Status']"
                  }
                } else {
                  Write-Host "##teamcity[testFailed name='$key' message='Log status file not found $LogStatusFilePath']"
                }
                $Diff =  New-TimeSpan -Start $JobTimes[$key][0] -End $JobTimes[$key][1]
                $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
                Write-Host  "##teamcity[testFinished name='$key' duration='$TotalMilliseconds']"
            }
        }
        foreach($listToDelete in $listsToDelete) {
            $JobArray.Remove($listToDelete)
        }
} while ($JobArray.count)

$JobTimes]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_15" name="Cover. Find PID proccess" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[Start-Sleep -s 5
$cmdOutput = Get-Content "%system.teamcity.build.tempDir%\Cover.Log" -First 1
$cmdOutput
$PIDArray = $cmdOutput.Split('.')
$PID_ID = $PIDArray[ $PIDArray.Count - 2 ]

echo "##teamcity[setParameter name='env.PID_ID' value='$PID_ID']"

Start-Sleep -s 5]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
      <runner id="RUNNER_4" name="Cover stop" type="simpleRunner">
        <parameters>
          <param name="script.content" value="coverage-cli stop -p %env.PID_ID%" />
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_25" name="taskkill" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$Proc = Get-Process -ID %env.dbgs_PID% -ErrorAction SilentlyContinue
If ($Proc) {
    Stop-Process -ID %env.dbgs_PID% -Force
}
Start-Sleep 1
$Proc = Get-Process -ID %env.PID_ID% -ErrorAction SilentlyContinue
If ($Proc) {
    Stop-Process -ID %env.PID_ID% -Force
}
Start-Sleep 1
Stop-Process -Name "1cv8" -Force
Start-Sleep 10
Stop-Process -Name "1cv8c" -Force
Start-Sleep 10]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
      <runner id="RUNNER_16" name="Cover convert" type="simpleRunner">
        <parameters>
          <param name="script.content" value="coverage-cli convert --input %system.teamcity.build.workingDir%/Cover.csv --output  %system.teamcity.build.workingDir%/Cover.xml --sources IRP\src --format EDT &amp; powershell -command &quot;(Get-Content %system.teamcity.build.workingDir%/Cover.xml) | ForEach-Object { $_ -replace '\\', '/' } | Set-Content %system.teamcity.build.workingDir%/Cover.xml&quot;" />
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_13" name="Allure Report" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[New-Item -Path "allure\base" -Name "history" -ItemType "directory" -Force
Copy-Item -Path "allure-history\*" -Destination "allure\base\history" -Force
%teamcity.tool.allure-commandline%\bin\allure.bat generate allure/* --clean -o "allure-report"
Compress-Archive -Path "allure-report/*" -DestinationPath "allure-report.zip"]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
      <runner id="RUNNER_53" name="ZIP DB after test done" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[#Copy-Item %system.teamcity.build.workingDir%\TempDB\1Cv8.1CD -Destination .
Compress-Archive -Path AllSteps\* -DestinationPath %env.Database1CName%_%build.number%.zip
Compress-Archive -Path Cover.xml -DestinationPath Cover.zip]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="IRP_GitTC" />
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="TRIGGER_4" type="buildDependencyTrigger">
        <parameters>
          <param name="afterSuccessfulBuildOnly" value="true" />
          <param name="branchFilter" value="+:*" />
          <param name="dependsOn" value="IRP_BuildCF" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="BUILD_EXT_3" type="commit-status-publisher">
        <parameters>
          <param name="github_authentication_type" value="token" />
          <param name="github_host" value="https://api.github.com" />
          <param name="github_oauth_user" value="DitriXNew" />
          <param name="publisherId" value="githubStatusPublisher" />
          <param name="secure:github_access_token" value="credentialsJSON:1fa3b09b-5cd9-4521-80c7-3c52664962a9" />
          <param name="vcsRootId" value="IRP_GitTC" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_4" type="pullRequests">
        <parameters>
          <param name="authenticationType" value="token" />
          <param name="filterAuthorRole" value="MEMBER" />
          <param name="providerType" value="github" />
          <param name="secure:accessToken" value="credentialsJSON:1fa3b09b-5cd9-4521-80c7-3c52664962a9" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_13" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="false" />
          <param name="teamcity.file.content.replacer.file.encoding" value="autodetect" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="autodetect" />
          <param name="teamcity.file.content.replacer.pattern" value="#workingDir#" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="true" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="%system.teamcity.build.workingDir%" />
          <param name="teamcity.file.content.replacer.wildcards" value="+:features/**.feature" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_19" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="false" />
          <param name="teamcity.file.content.replacer.file.encoding" value="UTF-8" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="UTF-8" />
          <param name="teamcity.file.content.replacer.pattern" value="And I click &quot;Post&quot; button" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="true" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="And I click &quot;Send&quot; button" />
          <param name="teamcity.file.content.replacer.wildcards" value="**/*.feature" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_27" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="true" />
          <param name="teamcity.file.content.replacer.file.encoding" value="autodetect" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="autodetect" />
          <param name="teamcity.file.content.replacer.pattern" value="#KeyTcmbGovTr#" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="false" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="%env.TR_Bank_Key%" />
          <param name="teamcity.file.content.replacer.wildcards" value="+:features/**.feature" />
        </parameters>
      </extension>
    </build-extensions>
    <artifact-dependencies>
      <dependency id="ARTIFACT_DEPENDENCY_2" sourceBuildTypeId="ExternalDataProcessor_ExtConvertToCfe" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="ExternalDataProcessors=&gt;DataProcessor" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_5" sourceBuildTypeId="IRP_BuildCF" cleanDestination="false">
        <revisionRule name="sameChainOrLastFinished" revision="latest.sameChainOrLastFinished" />
        <artifact sourcePath="%env.Database1CName%.cf" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_6" sourceBuildTypeId="IRP_RunVA" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" branch="+:develop" />
        <artifact sourcePath="allure-report.zip!/history=&gt;allure-history" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_11" sourceBuildTypeId="IRP_AdditionalFunctionality_Build" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="IRP_AdditionalFunctionality.cfe=&gt;DataProcessor/" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_10" sourceBuildTypeId="Reports_Build" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="Reports.cfe=&gt;DataProcessor" />
      </dependency>
    </artifact-dependencies>
    <dependencies>
      <depend-on sourceBuildTypeId="IRP_BuildCF">
        <options>
          <option name="run-build-if-dependency-failed" value="CANCEL" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

